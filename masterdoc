Below is a comprehensive user documentation in Markdown format for your Mastercam Git-based app, designed for use with **MkDocs ** to generate a professional, navigable documentation site. The documentation covers the app’s purpose, setup, and workflow for checking out, editing, and checking in CAD files(`.mcam`, `.vnc`), with placeholders for screenshots or images to illustrate key steps. It assumes your app uses a web interface(FastAPI backend, JavaScript frontend) with GitLab as the source of truth, sparse/shallow clones, and Git LFS for large files, as per our previous discussion. The workflow is tailored to your low-usage CAD environment, emphasizing minimal local storage, race condition handling, and network error recovery. I’ve included MkDocs configuration and structured the content for easy integration into your company’s documentation site.

# User Documentation

<xaiArtifact artifact_id = "eb98b10c-bb71-4664-af3b-2bd403d551cf" artifact_version_id = "1dbe9c2b-aa01-4df0-8cf8-fcea169eb63a" title = "user_guide.md" contentType = "text/markdown" >

# Mastercam Git App User Guide

# Overview

The Mastercam Git App is a web-based tool for managing Mastercam CAD files(`.mcam`, `.vnc`) stored in a GitLab repository. It allows users to check out files for editing, check them back in with version control, and manage revisions, while minimizing local storage on your PC. The app ensures files are locked to prevent conflicts, uses Git LFS for efficient handling of large files, and provides clear error messages for issues like network failures or race conditions.

This guide covers how to set up the app and follow the standard workflow for working with CAD files.

# Prerequisites

- **Operating System**: Windows 10/11 (app is packaged as a standalone executable).
- **Mastercam**: Installed and licensed for editing `.mcam` and `.vnc` files.
- **Network Access**: Connection to the internal GitLab server.
- **App Executable**: Provided by your IT team, built with PyInstaller.
- **Git LFS**: Included in the app; no separate installation needed.

# Setup

1. ** Install the App**:
   - Download `MastercamGitApp.exe` from [Internal SharePoint Link](  # ) (replace with your company’s link).
   - Double-click to run; no installation is required.
   - The app runs without a console window and creates a local repository in `C: \Users\<YourUsername>\MastercamGitRepo`.

2. **Configure the App**:
   - On first launch, the app prompts for your GitLab credentials:
     - **GitLab URL**: Provided by IT (e.g., `https://gitlab.yourcompany.com`).
     - **Project ID**: Provided by IT (e.g., `group/project`).
     - **Personal Access Token**: Generate in GitLab:
       1. Log in to GitLab.
       2. Go to **User Settings > Access Tokens**.
       3. Create a token with `read_repository` and `write_repository` scopes.
       4. Copy and paste it into the app’s config prompt.
   - Credentials are securely stored in an encrypted config file.

3. **Verify Setup**:
   - The app initializes a local Git repository with minimal storage (only metadata and checked-out files).
   - If setup fails (e.g., network issue), a modal will display: “Network issue: Disconnected from GitLab. Please check connection.” Contact IT if this persists.

   ![Setup Modal](images/setup-modal.png) *(Placeholder: IT to insert screenshot of config prompt modal)*

## Workflow

The app’s workflow is designed to manage CAD files efficiently, ensuring only the files you check out are stored locally, with version history maintained on GitLab.

### Step 1: Launch the App

- Double-click `MastercamGitApp.exe` to open the web interface in your default browser (e.g., `http://localhost:8000`).
- Log in with your username (same as your GitLab username).
- The main interface shows a file list grouped by project folders, with columns for filename, status (unlocked/locked/checked out by you), revision, and last modified date.

  ![Main Interface](images/main-interface.png) *(Placeholder: IT to insert screenshot of file list)*

### Step 2: Check Out a File

1. **Select a File**:
   - Browse or search for a `.mcam` or `.vnc` file in the file list.
   - Check the **Status** column:
     - **Unlocked**: Available to check out.
     - **Locked**: Another user has it checked out (hover for user details).
     - **Checked out by you**: Already checked out on your PC.

2. **Check Out**:
   - Click the **Checkout** button next to the desired file.
   - The app downloads the file to your local repo (e.g., `C:\Users\<YourUsername>\MastercamGitRepo\<filename>`).
   - A lock is created on GitLab to prevent others from editing.
   - Success: Notification shows “Checked out <filename> successfully!”
   - Failure (e.g., another user checked it out first): A modal displays, “Checkout failed: File is already locked.” Click **Retry** to try again or **Cancel** to return.

   ![Checkout Modal](images/checkout-failure-modal.png) *(Placeholder: IT to insert screenshot of checkout failure modal)*

3. **Edit the File**:
   - Open the file in Mastercam from the local repo path.
   - Make your changes as needed.

### Step 3: Check In a File

1. **Open Check-in Modal**:
   - In the app, locate the file (status: “Checked out by you”).
   - Click the **Check In** button.
   - A modal appears to enter:
     - **Commit Message**: Describe your changes (e.g., “Updated toolpath for part X”).
     - **Revision Type**: Select `Minor` (e.g., 1.1 → 1.2) or `Major` (e.g., 1.2 → 2.0).
     - **New Major Revision** (optional): Specify a new major version (e.g., “2.0”) if needed.

   ![Check-in Modal](images/checkin-modal.png) *(Placeholder: IT to insert screenshot of check-in modal)*

2. **Upload and Commit**:
   - Click **Submit** to upload the modified file.
   - The app commits the file to GitLab, updates the revision, and removes the lock.
   - The file is deleted from your local PC to save space.
   - Success: Notification shows “Checked in <filename> successfully with revision X.Y!”
   - Failure (e.g., network issue): A modal displays, “Check-in failed: File remains checked out.” Click **OK** to keep the file checked out and try again later.

### Step 4: Handle Network Issues

- If the app detects a network issue (e.g., can’t reach GitLab), a modal appears: “Network error: Disconnected from GitLab. Changes disabled until reconnected.”
- All buttons are disabled to prevent actions until reconnected.
- Click **Retry** to refresh or contact IT if the issue persists.

  ![Network Error Modal](images/network-error-modal.png) *(Placeholder: IT to insert screenshot of network error modal)*

### Step 5: Admin Actions (Optional)

- **Admins Only**: To delete a file (e.g., obsolete `.mcam` or `.vnc`):
  - Click **Delete** next to the file (visible only to admins).
  - Confirm in the modal to remove the file and any linked `.link` files from GitLab.
  - Success: Notification shows “File <filename> deleted successfully!”

## Best Practices

- **Check Out Only What You Need**: Only check out files you’re actively editing to minimize local storage.
- **Provide Clear Commit Messages**: Include details (e.g., “Fixed toolpath for CNC-123”) for team visibility.
- **Avoid Direct File Edits**: Always use the app to check out/in files; editing files directly in the repo folder may cause conflicts.
- **Monitor Locks**: If a file is locked by another user, hover over the status to see who has it and contact them if needed.
- **Report Issues**: If you see persistent network errors or checkout failures, contact IT with the error message from the modal.

## Troubleshooting

- **“File is already locked”**:
  - Another user has the file checked out. Wait or contact them to check it in.
  - Admins can override locks via the **Delete** action if necessary.
- **“Network issue: Disconnected from GitLab”**:
  - Check your internet connection and retry.
  - Contact IT if the issue persists; your local changes are safe and remain checked out.
- **File Not Found After Checkout**:
  - Ensure the file downloaded to `C:\Users\<YourUsername>\MastercamGitRepo`.
  - Retry checkout or contact IT to verify Git LFS setup.
- **App Won’t Start**:
  - Ensure you have write permissions to `C:\Users\<YourUsername>\MastercamGitRepo`.
  - Re-download the executable from [SharePoint Link](#).

## Contact Support

For issues or questions, contact the IT team at [support@yourcompany.com](mailto:support@yourcompany.com) or via [Internal Support Portal](#).

</xaiArtifact>

### MkDocs Configuration

To integrate this into your MkDocs site, add the following configuration file to your MkDocs project directory. It sets up a clean structure with a navigation menu and support for images.

<xaiArtifact artifact_id="83cda1d7-ebd9-4b59-97ee-ba46e5434b15" artifact_version_id="3599fea2-1533-47bb-b2c7-8603b535a287" title="mkdocs.yml" contentType="text/yaml">
```yaml
site_name: Mastercam Git App Documentation
theme:
  name: material
  palette:
    primary: blue
  features:
    - content.code.copy
    - content.tabs
nav:
  - Home: index.md
  - User Guide: user_guide.md
markdown_extensions:
  - admonition
  - pymdownx.details
  - pymdownx.superfences
  - pymdownx.tabbed
extra:
  generator: false
  social:
    - icon: fontawesome/brands/gitlab
      link: https://gitlab.yourcompany.com
    - icon: fontawesome/solid/envelope
      link: mailto:support@yourcompany.com
```

</xaiArtifact>

### Folder Structure

Place the files as follows in your MkDocs project:

```
mkdocs-project/
├── docs/
│   ├── user_guide.md
│   ├── images/
│   │   ├── setup-modal.png
│   │   ├── main-interface.png
│   │   ├── checkout-failure-modal.png
│   │   ├── checkin-modal.png
│   │   ├── network-error-modal.png
├── mkdocs.yml
```

- **Images**: Create placeholder PNG files for now. Your IT team should replace them with actual screenshots of:
  - Config prompt modal (`setup-modal.png`).
  - Main file list interface (`main-interface.png`).
  - Checkout failure modal (`checkout-failure-modal.png`).
  - Check-in modal (`checkin-modal.png`).
  - Network error modal (`network-error-modal.png`).
- **Links**: Replace `[Internal SharePoint Link](#)` and `[Internal Support Portal](#)` with your company’s actual URLs.

### Building and Serving with MkDocs

1. **Install MkDocs** (if not already installed):
   ```bash
   pip install mkdocs mkdocs-material
   ```

2. **Add Files**:
   - Save `user_guide.md` in `docs/`.
   - Save `mkdocs.yml` in the project root.
   - Create an `index.md` (optional, e.g., a welcome page) or copy `user_guide.md` as `index.md`.
   - Create placeholder images in `docs/images/` (e.g., empty PNGs).

3. **Preview the Site**:
   ```bash
   mkdocs serve
   ```
   - Open `http://localhost:8000` to view the site.
   - Verify navigation, formatting, and image placeholders.

4. **Build for Deployment**:
   ```bash
   mkdocs build
   ```
   - Outputs a `site/` directory for hosting on your internal server (e.g., via nginx or GitLab Pages).

5. **Deploy**:
   - Copy the `site/` directory to your company’s web server or use GitLab Pages.
   - Update links in `user_guide.md` to point to the hosted location.

### Notes for IT Team
- **Screenshots**: Capture images of the app’s UI for each placeholder (e.g., use Snipping Tool or browser dev tools).
- **Customization**: Adjust the `mkdocs.yml` theme (e.g., colors, logo) to match your company’s branding.
- **Access Control**: Host the documentation on an internal server with authentication (e.g., SSO via GitLab).
- **Updates**: If the app’s UI changes, update screenshots and workflow steps in `user_guide.md`.

### Workflow Summary
The documentation outlines a clear workflow:
1. Launch the app and log in.
2. Check out a file, edit in Mastercam, and save locally.
3. Check in the file with a commit message and revision type.
4. Handle errors via modals (e.g., race conditions, network issues).
5. Admins can delete files if needed.

This aligns with your app’s features (sparse checkout, Git LFS, lock management) and ensures users understand how to avoid conflicts and manage storage efficiently.

### Next Steps
- **Provide Screenshots**: Share your app’s UI screenshots or `index.html`/`script.js` snippets so I can tailor the image descriptions.
- **Add More Sections**: If you need advanced topics (e.g., admin guide, API usage), let me know.
- **Test Documentation**: Run `mkdocs serve` and review the rendered site, then update placeholders.

Let me know if you need help with MkDocs setup, additional Markdown sections, or specific UI details for the screenshots!